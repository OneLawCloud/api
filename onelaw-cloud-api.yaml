openapi: 3.0.3

info:
  title: OneLaw Cloud API
  version: 0.2.0
  license: 
    name: MIT
    url: https://opensource.org/licenses/MIT
      
  description: >
    OneLaw Cloud provides a RESTful interface for managing parties, clients, matters, and time entries for law firms.

servers:
  - url: https://integration.onepractice.net/v1
    description: Integration / Testing
  - url: https://api.onepractice.net/v1
    description: Production

tags:
  - name: Parties
    description: All individuals, organisations, or groups (e.g. trusts) involved in legal matters.
  - name: Party Notes
    description: Text notes on Parties
  - name: Clients
    description: Parties that have a client relationship with the law firm.
  - name: Matters
    description: Legal matters that the law firm works on for their clients.
  - name: Matter Notes
    description: Text notes on Matters
  - name: Time Entries
    description: Billable or time recorded against legal matters by users
  - name: Non-Client Time Entries
    description: Non-billable time recorded against users.
  - name: Users
    description: Staff members who use the software.
  - name: Codes
    description: Codes used for categorisation and reporting

security:
  - OAuth2:
      - access_as_user

components:
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://devolcb2c.b2clogin.com/devolcb2c.onmicrosoft.com/oauth2/v2.0/authorize?p=b2c_1_si
          tokenUrl:         https://devolcb2c.b2clogin.com/devolcb2c.onmicrosoft.com/oauth2/v2.0/token?p=b2c_1_si
          scopes:
            openid:         OpenID Connect ID token
            profile:        Basic user info
            access_as_user: Access resources impersonating user
            offline_access: Refresh tokens

  parameters:
    partyId:
      name: partyId
      in: path
      required: true
      description: Unique identifier of a party.
      schema:
        type: string
        format: uuid
    clientId:
      name: clientId
      in: path
      required: true
      description: Unique identifier of a client.
      schema:
        type: string
        format: uuid
    userId:
      name: userId
      in: path
      required: true
      description: Unique identifier of a user.
      schema:
        type: string
        format: uuid
    matterId:
      name: matterId
      in: path
      required: true
      description: Unique identifier of a matter.
      schema:
        type: string
        format: uuid
    timeEntryId:
      name: timeEntryId
      in: path
      required: true
      description: Unique identifier of a time entry.
      schema:
        type: string
        format: uuid
    nonClientTimeEntryId:
      name: nonClientTimeEntryId
      in: path
      required: true
      description: Unique identifier of a non-client time entry.
      schema:
        type: string
        format: uuid
    noteId:
      name: noteId
      in: path
      required: true
      description: Unique identifier of a note.
      schema:
        type: string
        format: uuid

    #
    # Common Paging Params
    #

    limit:
      name: limit
      in: query
      description: Max items to return (1-100).
      required: false
      schema:
        type: integer
        minimum: 1
        default: 50
        maximum: 100

    offset:
      name: offset
      in: query
      description: Zero-based index of first item to return.
      required: false
      schema:
        type: integer
        default: 0

    #
    # Idempotency
    #

    idempotencyKey:
      name: Idempotency-Key
      in: header
      description: >
        Idempotency-Key request header as defined in draft-ietf-httpapi-idempotency-key-header-06.
        Send a value (typically a UUID v4) that is **unique to this semantic request**.  When the same key is reused with an
        identical payload, the server MUST return the original response instead of performing the action again.
      required: false
      schema:
        type: string
        example: 'c7b5e4fb-3f05-4d84-8a4a-08f3d9b9ca2e'

  schemas:
    SystemPartyType:
      type: string
      enum: [natural, legal, multi]

    PartyRole:
      type: string
      enum: [client, user]

    NoteVisibility:
      type: string
      enum: [public, private, team]

    TelcoAddress:
      type: object
      required: [type, phone, phoneE164, country]
      properties:
        type:
          type: string
          description: Domain-specific label (e.g. "mobile", "work").
        phone:
          type: string
          description: Phone number in local format.
        phoneE164:
          type: string
          description: Phone number in international E.164 format.
        country:
          type: string
          description: Country name or ISO country code.
        primaryUses:
          type: array
          items: 
            type: string
          description: The uses for which this is the primary number.
      additionalProperties: false

    GeoAddress:
      type: object
      required: [type]
      properties:
        type:
          type: string
          description: Domain-specific label (e.g. "street", "postal").
        address:
          type: string
          description: Full address (multi-line text).
        country:
          type: string
          description: Country code
        postcode:
          type: string
        street:
          type: string
          description: Street number and name
        suburb:
          type: string
        city:
          type: string
        state:
          type: string
        primaryUses:
          type: array
          items: 
            type: string
          description: The uses for which this is the primary number.
      additionalProperties: false

    EmailAddress:
      type: object
      required: [type, email]
      properties:
        type:
          type: string
          description: Domain-specific label (e.g. "work", "personal").
        email:
          type: string
          format: email
        primaryUses:
          type: array
          items: 
            type: string
          description: The uses for which this is the primary number.
      additionalProperties: false

    PartyType:
      type: object
      properties:
        name:
          type: string
        systemType:
          $ref: '#/components/schemas/SystemPartyType'

    Party:
      type: object
      required: [ name, type, roles ]
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        type:
          $ref: '#/components/schemas/PartyType'
        roles:
          type: array
          items:
            $ref: '#/components/schemas/PartyRole'
        clientId:
          type: string
          format: uuid
          nullable: true
          description: The client id of the party if the party is a client.
        userId:
          type: string
          format: uuid
          nullable: true
          description: The user id of the party if the party is a user.
        telephoneNumbers:
          type: array
          items:
            $ref: '#/components/schemas/TelcoAddress'
        emailAddresses:
          type: array
          items:
            $ref: '#/components/schemas/EmailAddress'
        geographicAddresses:
          type: array
          items:
            $ref: '#/components/schemas/GeoAddress'
        created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        lastUpdated:
          type: string
          format: date-time
          readOnly: true
          nullable: true
      additionalProperties: false

    Person:
      allOf:
        - $ref: '#/components/schemas/Party'
        - type: object
          properties:
            personName:
              $ref: '#/components/schemas/PersonName'
            employer:
              type: string

    LegalEntity:
      allOf:
        - $ref: '#/components/schemas/Party'
        - type: object

    MultiParty:
      allOf:
        - $ref: '#/components/schemas/Party'
        - type: object
          properties:
            members: 
              type: array
              items:
                $ref: '#/components/schemas/Party'

    PersonName:
      type: object
      properties:
        title: 
          type: string
        first:
          type: string
        middle:
          type: string
        last:
          type: string
        suffix:
          type: string
        knownAs:
          type: string

    Client:
      type: object
      properties:
        clientNumber:
          type: string
          description: Firm-specific client reference.
        matters: 
          type: array
          items:
            $ref: '#/components/schemas/Matter'
        party:
          $ref: '#/components/schemas/Party'

    User:
      type: object
      properties:
        username:
          type: string
        party:
          $ref: '#/components/schemas/Party'

    Matter:
      type: object
      required: [id, clientId, title, status, openedDate]
      properties:
        id:
          type: string
          format: uuid
          description: The backend ID for the matter.
          readOnly: true
        number:
          type: integer
          description: The user-visible number used to refer to the matter.
          readOnly: true
        description:
          type: string
        createdDate:
          type: string
          format: date
          readOnly: true
          nullable: true
        subFeeTypeId:
          type: string
          format: uuid

    NoteCreate:
      type: object
      required: [note, visibility, warning]
      properties:
        note:
          type: string
          description: Free-form note text.
        warning:
          type: boolean
          description: If true, displays a prominent warning to users.
        visibility:
          $ref: '#/components/schemas/NoteVisibility'

    Note:
      allOf:
      - $ref: '#/components/schemas/NoteCreate'
      - type: object
        required: [id, note, visibility, warning, created, lastUpdated]
        properties:
          id:
            type: string
            format: uuid
          created:
            type: string
            format: date-time
          lastUpdated:
            type: string
            format: date-time

    TimeEntryCreate:
      type: object
      required: [ matterId, start, duration, wipCode, rateCode, subFeeTypeId ]
      properties:
        matterId:
          type: string
          format: uuid
          description: The id of the matter the time should be billed to.
        start:
          type: string
          format: date-time
          description: The start date and time of the time entry, time is recorded in 6 minute intervals so the minutes component must be mod 6.
        duration:
          type: integer
          minimum: 6
          multipleOf: 6
          description: Duration of the time entry in minutes and always a multiple of 6.
        wipCode:
          type: string
          description: The code for a low level categorization of the work performed, loaded from wipcodes path.
        note:
          type: string
        rateCode:
          type: string
          description: The code of the rate used to bill this time
        subFeeTypeId:
          type: string
          format: uuid
          description: high level categorization of the work performed, should default to the sub fee type of the matter.

    TimeEntry:
      allOf:
        - $ref: '#/components/schemas/TimeEntryCreate'
        - type: object
          required: [id, userId, authorId, matterId, start, duration, wipCode, rateCode, subFeeTypeId]
          properties:
            id:
              type: string
              format: uuid
            userId:
              type: string
              format: uuid
              description: The id of the user recording the time, possibly different from who the time is recorded for.
            authorId:
              type: string
              format: uuid
              description: The id of the user who the time is recorded for.
            judgedValue:
              type: number
              format: double
              description: Override the billable value of the time.
            judgedValueReasonCode:
              type: string
              description: Provide a reason why you're using a judged value to override the billable value.
                  
    NonClientTimeEntryCreate:
      type: object
      required: [ userId, authorId, start, duration, wipCode ]
      properties:
        start:
          type: string
          format: date-time
          description: The start date and time of the time entry, time is recorded in 6 minute intervals so the minutes component must be mod 6.
        duration:
          type: integer
          minimum: 6
          multipleOf: 6
          description: Duration of the time entry in minutes and always a multiple of 6.
        wipCode:
          type: string
          description: The code for a low level categorization of the work performed, loaded from wipcodes path.
        note:
          type: string

    NonClientTimeEntry:
      allOf:
        - $ref: '#/components/schemas/NonClientTimeEntryCreate'
        - type: object
          required: [id, userId, authorId, matterId, start, duration, wipCode ]
          properties:
            id:
              type: string
              format: uuid
            userId:
              type: string
              format: uuid
              description: The id of the user recording the time, possibly different from who the time is recorded for.
            authorId:
              type: string
              format: uuid
              description: The id of the user who the time is recorded for.
      
    WipCode:
      type: object
      properties:
        code:
          type: string
        description:
          type: string
        narration:
          type: string
        chargeable:
          type: boolean
        active:
          type: boolean

    RateType:
      type: object
      properties:
        code:
          type: string
        default:
          type: boolean
          description: true if this is the default rate used for billing time.
        description:
          type: string
        active:
          type: boolean

    JudgedValueReason:
      type: object
      properties:
        code:
          type: string
        description:
          type: string

    PartyPagedResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Party'
        total:
          type: integer

    ClientPagedResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Client'
        total:
          type: integer

    NonClientTimeEntryPagedResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/NonClientTimeEntry'
        total:
          type: integer

    TimeEntryPagedResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/TimeEntry'
        total:
          type: integer

    FeeType:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        subFeeTypes:
          type: array
          items:
            $ref: '#/components/schemas/SubFeeType'

    SubFeeType:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
    
    Error:
      type: object
      required: [code, message]
      properties:
        code:
          type: string
        message:
          type: string

  responses:
    NotFound:
      description: Resource not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequest:
      description: Request validation failed, see body for details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

paths:

  #
  # Fee Types & Sub Fee Types
  #

  /fee-types:
    get:
      operationId: getFeeTypes
      summary: Get all fee types
      description: Used to categorize areas of legal practice in matters and time recorded.
      tags: [Codes]
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FeeType'
        '400':
          description: Bad request.

  #
  # Judged Value Reasons
  #

  /judged-value-reasons:
    get:
      operationId: getJudgedValueReasons
      summary: Get all judged value reason codes
      description: Reasons why some time entries are recorded with a judged value.
      tags: [Codes]
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JudgedValueReason'
        '400':
          description: Bad request.
            
  # WIP Codes
  /wip-codes:
    get:
      operationId: getWipCodes
      summary: Get all WIP codes
      description: Used for detailed categorisation of work performed in a time entry.
      tags: [Codes]
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WipCode'
        '400':
          description: Bad request.

  #
  # Rate Types
  #

  /rate-types:
    get:
      operationId: getRateTypes
      summary: Get all billing rates
      description: Rates determine the cost of time when billed.
      tags: [Codes]
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RateType'
        '400':
          description: Bad request.

  #
  # Parties
  #

  /parties:
    get:
      operationId: getParties
      summary: Get all parties
      description: Parties are all the people and legal entitites involved in legal matters.
      tags: [Parties]
      parameters:
        - name: updatedAfter
          in: query
          schema:
            type: string
            format: date-time
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartyPagedResponse'
        '400':
          description: Bad request.
            
  /parties/{partyId}:
    parameters:
      - $ref: '#/components/parameters/partyId'
    get:
      operationId: getParty
      summary: Get a party by ID
      tags: [Parties]
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Party'
        '404':
          $ref: '#/components/responses/NotFound'

  #
  # Party Notes
  #

  /parties/{partyId}/notes:
    get:
      operationId: getPartyNotes
      summary: Get all notes on a party
      description: Text note recorded against a party, can also have a warning flag.
      parameters:
        - $ref: '#/components/parameters/partyId'
      tags: [Party Notes]
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Note'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      operationId: savePartyNote
      summary: Create a note on a party
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
        required: true
      - $ref: '#/components/parameters/partyId'
      tags: [Party Notes]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NoteCreate'
      responses:
        '201':
          description: Created
          headers:
            Location:
              description: URL of the new resource.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /parties/{partyId}/notes/{noteId}:
    put:
      operationId: updatePartyNote
      summary: Update an existing party note
      parameters:
      - $ref: '#/components/parameters/partyId'
      - $ref: '#/components/parameters/noteId'
      tags: [Party Notes]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NoteCreate'
      responses: 
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        '404':
          $ref: '#/components/responses/NotFound'

  #
  # Clients
  #

  /clients:
    get:
      summary: Get all clients
      operationId: getClients
      description: Parties that have the Client role and therefore also matters with the law firm.
      tags: [Clients]
      parameters:
        - name: updatedAfter
          in: query
          schema:
            type: string
            format: date-time
        - name: deactivatedAfter
          in: query
          schema:
            type: string
            format: date-time
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientPagedResponse'
        '400':
          description: Bad request.
            
  /clients/{clientId}:
    parameters:
      - $ref: '#/components/parameters/clientId'
    get:
      operationId: getClient
      summary: Get a client by ID
      tags: [Clients]
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '404':
          $ref: '#/components/responses/NotFound'

  #
  # Matters
  #

  /clients/{clientId}/matters:
    parameters:
      - $ref: '#/components/parameters/clientId'
    get:
      operationId: getMattersByClient
      summary: Get all matters for a client
      tags: [Matters]
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Matter'
        '404':
          $ref: '#/components/responses/NotFound'

  /matters/{matterId}:
    parameters:
      - $ref: '#/components/parameters/matterId'
    get:
      operationId: getMatter
      summary: Get a matter by ID
      tags: [Matters]
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Matter'
        '404':
          $ref: '#/components/responses/NotFound'

  /matters/{matterId}/notes:
    parameters:
      - $ref: '#/components/parameters/matterId'
    get:
      operationId: getMatterNotes
      summary: Get all notes for a matter
      tags: [Matter Notes]
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Note'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      operationId: saveMatterNote
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
        required: true
      summary: Create a note for a matter
      tags: [Matter Notes]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NoteCreate'
      responses:
        '201':
          description: Created
          headers:
            Location:
              description: URL of the new resource.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /matters/{matterId}/notes/{noteId}:
    parameters:
      - $ref: '#/components/parameters/matterId'
      - $ref: '#/components/parameters/noteId'
    get:
      operationId: getMatterNote
      summary: Get a note by ID
      tags: [Matter Notes]
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      operationId: updateMatterNote
      summary: Update an existing note
      tags: [Matter Notes]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NoteCreate'
      responses: 
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        '404':
          $ref: '#/components/responses/NotFound'

  #        
  # Users
  #

  /users:
    get:
      operationId: getUsers
      summary: Get all users
      tags: [Users]
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Bad request.
            
  /users/{userId}:
    parameters:
      - $ref: '#/components/parameters/userId'
    get:
      operationId: getUser
      summary: Get a user by ID
      tags: [Users]
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'

  #
  # Non-client Time (recorded against a user)
  #

  /users/{userId}/non-client-time-entries:
    parameters:
      - $ref: '#/components/parameters/userId'
    get:
      operationId: getNonClientTimeByUser
      summary: Get all non-client time for a user
      description: Time spent on non-client parties, so not immediately billable.
      tags: [Non-Client Time Entries]
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NonClientTimeEntryPagedResponse'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      operationId: saveNonClientTimeByUser
      summary: Save non-client time for a user
      description: Time spent on non-client parties, so not immediately billable.
      tags: [Non-Client Time Entries]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NonClientTimeEntryCreate'
      responses:
        '201':
          description: Created
          headers:
            Location:
              description: URL of the new resource.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NonClientTimeEntry'
        '404':
          $ref: '#/components/responses/NotFound'

  /users/{userId}/non-client-time-entries/{nonClientTimeEntryId}:
    parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/nonClientTimeEntryId'
    put:
      operationId: updateNonClientTime
      summary: Update non-client time for a user
      tags: [Non-Client Time Entries]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NonClientTimeEntryCreate'
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NonClientTimeEntry'
        '404':
          $ref: '#/components/responses/NotFound'

  #
  # Time Recording
  #

  /matters/{matterId}/time-entries:
    parameters:
      - $ref: '#/components/parameters/matterId'
    get:
      operationId: getTimeByMatter
      summary: Get all time entries for a matter
      description: Regular time entries recorded on matters that will be billed.
      tags: [Time Entries]
      parameters: 
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeEntryPagedResponse'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      operationId: saveTimeToMatter
      parameters:
      - $ref: '#/components/parameters/idempotencyKey'
        required: true
      summary: Add a time entry to a matter
      tags: [Time Entries]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimeEntryCreate'
      responses:
        '201':
          description: Created
          headers:
            Location:
              description: URL of the new resource.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeEntry'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /matters/{matterId}/time-entries/{timeEntryId}:
    parameters:
      - $ref: '#/components/parameters/matterId'
      - $ref: '#/components/parameters/timeEntryId'
    put:
      operationId: updateMatterTime
      summary: Update an existing time entry
      tags: [ Time Entries ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimeEntryCreate'
      responses: 
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeEntry'
        '404':
          $ref: '#/components/responses/NotFound'
